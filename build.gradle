apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

project.version = '0.1.0'
project.group = 'de.hhu.stups'
project.archivesBaseName = 'infolog-parser'


configurations {
    sablecc
}

repositories {
    mavenCentral()
}

jar {
    from sourceSets.main.allJava
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    sablecc(group: 'de.hhu.stups', name: 'sablecc', version: '3.2.10')
    testCompile 'junit:junit:4.8.2'
}

sourceSets {
    main {
        java {
            srcDirs = ['build/temp','src/main/java']
        }
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task genParser(type:JavaExec) {
    doFirst{ file('build/temp').mkdirs() }
    inputs.dir new File('src/main/resources/grammars')
    outputs.dir new File('build/temp')
//  doFirst{ file('build/temp').mkdirs() }
     main = 'org.sablecc.sablecc.SableCC'
    // classpath =  sourceSets.main.compileClasspath
     classpath = configurations.sablecc
     maxHeapSize = '1024m'
     args = ['-d','build/temp','src/main/resources/extract.scc']
}

jar {
 include '**/*.class'
 exclude '**.*.scc'
 from 'build/temp'
 include '**/*.dat'
 from sourceSets.main.toString()
 include '**/*.java'
}

artifacts {
    archives javadocJar, sourcesJar
}

task patches << {
  ant.patch(patchfile: 'patches/position.patch', originalfile: 'build/temp/de/hhu/stups/sablecc/patch/PositionedNode.java', failonerror:'true')
}

compileJava {
 dependsOn = ['genParser', 'patches']
}



sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs)

if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {

println "Configured upload task"
  
apply plugin: 'signing'

signing {
    sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'Infolog Parser'
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'Tool to extract Prolog-Doc style comments from a .pl file. This library is a part of the Infolog system.'
        url 'https://github.com/bendisposto/infolog-parser'

        licenses {
          license {
            name 'Eclipse Public License, Version 1.0'
            url 'http://www.eclipse.org/org/documents/epl-v10.html'
          }
        }

        scm {
          connection 'scm:git:git://github.com/bendisposto/infolog-parser.git'
          developerConnection 'scm:git:git@github.com:bendisposto/infolog-parser.git'
          url 'https://github.com/bendisposto/infolog-parser'
        }


        developers {
          developer {
            id 'bendisposto'
            name 'Jens Bendisposto'
            email 'jens@bendisposto.de'
          }
        }
      }
    }
  }
}
}
